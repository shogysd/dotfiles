### ------------ ###
### change shell ###
### ------------ ###

if [ $(echo $SHELL | xargs basename) = 'bash' ]; then
    which zsh >/dev/null 2>&1
    if [ $? = 0 ]; then
        exec zsh
    fi
fi



### ------------------ ###
### shell environments ###
### ------------------ ###

SHELL_NAME='bash'

if [ "$(uname 2>&1)" = "Darwin" ]; then
    # macOS
    export OSDEP_ESC_CODE='\033'
    export OSDEP_DOWNLOAD_COMMAND='curl -s -o'
    export BASH_SILENCE_DEPRECATION_WARNING=1
else
    # Linux
    export OSDEP_ESC_CODE='\e'
    export OSDEP_DOWNLOAD_COMMAND='wget -q -O'
fi



### ---------------- ###
### dir environments ###
### ---------------- ###

mkdir -p ${HOME}/.ssh
mkdir -p ${HOME}/.ssh/local_conf
mkdir -p ${HOME}/.ssh/controlmaster
mkdir -p ${HOME}/bin
mkdir -p ${HOME}/opt
mkdir -p ${HOME}/.bash



### ----------------- ###
### PATH environments ###
### ----------------- ###

for path_name in $( find ~/bin -maxdepth 1 -type d -or -type l -not -name '.*' ); do
    if [ ! "$( echo ${PATH} | grep ${path_name} )" ]; then
        PATH="${path_name}:${PATH}"
    fi
    export PATH
done



### ----------------- ###
### bash environments ###
### ----------------- ###

PS1="\n\$(shell_info)\n\$(_bashIconWriter)\$(_envWriter)\$ "

# shell conf
export HOSTSTRIPSTR=".local"
export BASICINFO="$(whoami)@$(hostname | sed -e 's/\.local//g')"

# 連続をしたコマンドを1度のみの記録に + スペースから始まるコマンドを無視
export HISTCONTROL=ignoreboth

# 履歴に保存しないコマンド
export HISTIGNORE='ls':'la':'ll':'shis':'history':'hn':'hostname':'gd':'man':'ex':'exit'

# プロンプトの表示前に実行するコマンド
PROMPT_COMMAND='history -a'

# 履歴のサイズを変更
export HISTSIZE=9999

# 履歴のフォーマットを設定 (c言語のstrftimeと同じものが使える)
export HISTTIMEFORMAT='%m-%d-%Y (%H:%M:%S)   '

# Ctrl-dを1回無視する（2回で反応）
IGNOREEOF=1
export IGNOREEOF

# virtualenvでpromptを変更しない
export VIRTUAL_ENV_DISABLE_PROMPT=1

# lessの'v'で何も起こらなくする
export VISUAL=':'

# 標準のエディターをemacsに
export EDITOR=emacs

# シェル終了時に履歴を追記しない (PROMPT_COMMAND='share_history' による)
shopt -u histappend

# ! でコマンドの再実行をする際に一度表示する
shopt -s histverify

# コマンド実行時に LINES と COLUMNS を更新する
shopt -s checkwinsize

# 拡張パターンマッチングを有効化する
shopt -s extglob

# ディレクトリ名のみでcd可能にする
### shopt -s autocd

# cdの細かいミスを修正する
shopt -s cdspell

# set
set -o | grep history | grep -q on
if [ $? != 0 ]; then
    set -o history
fi



### ----------------- ###
### bash import files ###
### ----------------- ###

if [ -f ~/.bash/completion/git-completion.bash ]; then
    . ~/.bash/completion/git-completion.bash
else
    echo "$(date '+%Y/%m/%d_%H:%M:%S')    ~/.bash/completion/git-completion.bash : No such file" \
    >> ${HOME}/.bash/bashrc_err.log
fi
if [ -f ~/.bash/completion/docker ]; then
    . ~/.bash/completion/docker
else
    echo "$(date '+%Y/%m/%d_%H:%M:%S')    ~/.bash/completion/docker : No such file" \
    >> ${HOME}/.bash/bash_err.log
fi



### ------- ###
### aliases ###
### ------- ###

if [ "$(uname 2>&1)" = "Darwin" ]; then
    # macOS
    alias ls='ls -G'
    alias md5sum='md5'
    alias ema='emacs'
    alias open='open ./'
else
    # Linux "$(uname 2>&1)" = "Linux"
    alias ls='ls --color=auto'
    alias ema='emacs -nw'
    alias emacs='emacs -nw'
    alias term-profile-export='dconf dump /org/gnome/terminal/legacy/profiles:/ \
                               > ~/dotfiles/Linux/gnome_terminal/gnome-terminal.profile'
    alias term-profile-import='dconf reset -f /org/gnome/terminal/legacy/profiles:/; \
                               dconf load /org/gnome/terminal/legacy/profiles:/ \
                               < ~/dotfiles/Linux/gnome_terminal/gnome-terminal.profile'
    alias open='nautilus ./'
fi

# command
alias sudo='sudo '
alias grep='grep --color=auto'
alias grepn='grep -i --color=auto'
alias rm='rm -i'
alias rm-y='\rm'
alias dir='dir --color=auto'
alias ll='ls -l'
alias la='ls -A'
alias hn='hostname'
alias flush='rm -f *~ .*~ \#*\# \**\*'
alias cp='cp -i'
alias pd-clear='dirs -c'
alias doc='docker'
alias ex='exit'

# git
alias gd='cd $(git rev-parse --show-toplevel)'

# python
alias py='python3'
alias python-disable_environment_variable='python3 -E'
alias activate='source ./bin/activate'



### ------------------- ###
### python environments ###
### ------------------- ###

# macOSのPATH
#if [ "$(uname 2>&1)" = "Darwin" ]; then
#    # macOS
#    for p in $(find /Library/Frameworks/Python.framework/Versions/* -maxdepth 1 -name bin | sort -r); do
#        ${p}/python3 --version | awk -F ' ' '{print $NF}' | grep -e a -e b > /dev/null
#        if [ ! $? -eq 0 ]; then
#            # PATH="${p}:$PATH"
#            PATH="$PATH:${p}"
#            break
#        fi
#        version=$(echo ${path} | awk -F '/' '{print $(NF - 1)}')
#        echo "    python${version} bin PATH added"
#    done
#fi

# virtualenvでpromptを変更しない
export VIRTUAL_ENV_DISABLE_PROMPT=1

# 開発モードを有効に
export PYTHONDEVMODE=1

# 文字コードをUTF-8に
export PYTHONUTF8=1



### ------------------- ###
### golang environments ###
### ------------------- ###

mkdir -p ${HOME}/.gopath_global
export GOPATH=${HOME}/.gopath_global



### ---------- ###
### functiuons ###
### ---------- ###

function venv(){
    if [ -z ${VIRTUAL_ENV} ] && [ $# = 1 ] && [ -f ${1}/bin/activate ]; then
        source ${1}/bin/activate
    elif [ ! -z ${VIRTUAL_ENV} ] && [ $# = 0 ]; then
        deactivate
    else
        echo "error: please check argument and virtualenv root path."
    fi
}


function screen_status(){
    screen -ls | grep Attached | tr '.' ' ' | echo -e "${OSDEP_ESC_CODE}[1;32m`awk '{printf "%s %s\t(Attached)\n", $1, $2}'`${OSDEP_ESC_CODE}[0;39m"
    screen -ls | grep Detached | tr '.' ' ' | awk '{printf "%s %s\t(Detached)\n", $1, $2}'
}


function strcmp(){
    if [ $# = 0 ]; then
        echo "error: nothing arguments"
        return 1
    elif [ $# = 1 ]; then
        echo "error: inadequate arguments"
        return 1
    elif [ $# -gt 2 ]; then
        echo "error: many arguments"
        return 1
    else
        if [ "$1" = "$2" ]; then
            echo "True"
        else
            echo "False"
        fi
    fi
    return 0
}


function addpath(){
    if [ $# = 0 ]; then
        target=$(pwd)
    elif [ $# -gt 1 ]; then
        echo "error: many arguments"
    else
        target=$(cd ${1} && pwd)
    fi
    declare -a path_list=();
    path_list=${PATH//:/ };

    for path in ${path_list[@]};
    do
        if [ "${target}" = "$path" ]; then
            echo "${target} is already exist in \$PATH"
            return 1
        fi
    done
    export PATH=${target}":"${PATH}
    echo ${target}" is added"
    return 0
}


function screen-clean(){
    echo -n "cleanup detached screen?: y-or-other: "
    read start
    if [ -z ${start} ] || [ ${start} != "y" ]; then
        echo "EXIT"
    else
        for id in `screen -ls | grep -e '(' -e ')' | tr '.' ' ' | grep 'Detached' | awk '{print $1}'`; do
            screen -S ${id} -X quit
        done
    fi
    unset start
}


function pd(){
    if [ $# = 0 ]; then
        popd
    elif [ $# = 1 ]; then
        pushd ${1}
    else
        echo "error: arg error"
    fi
}


function hosts-switch(){
    if [ -f /etc/hosts ] && [ -f /etc/hosts_BAK ] && [ "$( cat /etc/hosts | grep '# disable mode' )" ]; then
        echo "currently disabled"
        echo -n "change to enable?: y-or-other: "
        read start
        if [ -z ${start} ] || [ ${start} != "y" ]; then
            return 1
        fi
        # disable to enable
        sudo rm -f /etc/hosts && \
        sudo mv /etc/hosts_BAK /etc/hosts
        echo "/etc/hosts enabled"
    elif [ -f /etc/hosts ] && [ ! -f /etc/hosts_BAK ] && [ "$( cat /etc/hosts | grep -v '# disable mode' )" ]; then
        echo "currently enabled"
        echo -n "change to disable?: y-or-other: "
        read start
        if [ -z ${start} ] || [ ${start} != "y" ]; then
            return 1
        fi
        # enable to disable
        sudo mv /etc/hosts /etc/hosts_BAK && \
        sudo sh -c "echo '# disable mode' > /etc/hosts" && \
        sudo sh -c "echo '127.0.0.1       localhost'     >> /etc/hosts" && \
        sudo sh -c "echo '255.255.255.255 broadcasthost' >> /etc/hosts" && \
        sudo sh -c "echo '::1             localhost'     >> /etc/hosts"
        echo "/etc/hosts disabled"
    else
        echo error
    fi
    unset start
}


function gitignore_global-switch(){
    if [ ! -f ~/.gitignore_global ] && [ -f ~/.gitignore_global_BAK ]; then
        # disable to enable
        mv ~/.gitignore_global_BAK ~/.gitignore_global
    elif [ -f ~/.gitignore_global ] && [ ! -f ~/.gitignore_global_BAK ]; then
        # enable to disable
        mv ~/.gitignore_global ~/.gitignore_global_BAK
    else
        echo error
    fi
}


function shis() {
    # Support: 2.x and 3.x (both)
    \python -E -- <<'EOF' - "$@"
from datetime import datetime
from os import getenv
from os import path
from re import search
from sys import argv
from sys import exit
from sys import stdout
from sys import stderr

if len(argv) < 2:
    stderr.write("argument error")
    # print("argument error: [" + ", ".join(argv[1:]) + "]" , file=stderr)
    exit(1)

hist_list = []

if path.isfile(getenv("HOME") + "/.zsh_history"):
    with open(getenv("HOME") + "/.zsh_history") as f:
        histories = f.readlines()
    before_line_tail = ""
    for hist in histories:
        if search("^: *[0-9]+:[0-9]+;.*", hist):
            dt = int(hist.split(":", 2)[1])
            cmd = hist.split(";")[1]
            hist_list.append({"dt": dt, "cmd": cmd})
            before_line_tail = hist[-2:]
        elif "\\\n" != before_line_tail:
            dt = 0
            cmd = hist
            hist_list.append({"dt": dt, "cmd": cmd})
            before_line_tail = hist[-2:]
        else:
            hist_list[-1]["cmd"] += " " * 23 + hist
            before_line_tail = hist[-2:]

if path.isfile(getenv("HOME") + "/.bash_history"):
    with open(getenv("HOME") + "/.bash_history") as f:
        histories = f.readlines()
    dt = 0
    for hist in histories:
        if search("^#[0-9]+$", hist):
            dt = int(hist[1:])
        else:
            cmd = hist
            hist_list.append({"dt": dt, "cmd": cmd})
            dt = 0

print_hists_dict = {}

for hist in hist_list:
    search_result = True

    for key in argv[1:]:
        if key not in hist["cmd"]:
            search_result = False
            break

    if search_result:
        if 0 == hist["dt"]:
            dt_str = "____-__-__ __:__:__"
            # dt_str = "    -  -     :  :  "
        else:
            dt = datetime.fromtimestamp(hist["dt"])
            d_str = "{:04}-{:02}-{:02}".format(dt.year, dt.month, dt.day)
            t_str= "{:02}:{:02}:{:02}".format(dt.hour, dt.minute, dt.second)
            dt_str = d_str + " " + t_str
        cmd_c_str = hist["cmd"].replace(argv[1], "\033[1;31m" + argv[1] + "\033[0m")
        #for key in argv[2:]:
        #    cmd_c_str = cmd_c_str.replace(key, "\033[31m" + key + "\033[0m")

        print_hists_dict[hist["cmd"]] = {"dt_int": hist["dt"], "dt_str": dt_str, "cmd_c_str": cmd_c_str}

for print_hist in sorted(print_hists_dict.values(), key=lambda x:x["dt_int"]):
    stdout.write('{dt}    {cmd}'.format(dt=print_hist["dt_str"], cmd=print_hist["cmd_c_str"]))
    # print('{dt}    {cmd}'.format(dt=print_hist["dt_str"], cmd=print_hist["cmd_c_str"]))
EOF
}


function strrep() {
    # Support: 2.x and 3.x (both)
    \python -E -- <<'EOF' - "$@"
from glob import glob
import os
import subprocess
from sys import argv
from sys import exit
from sys import stderr

def file_scaner(paths, files):
    for p in paths:
        if os.path.isfile(p):
            f_type = subprocess.check_output("file "+str(p), stderr=subprocess.STDOUT, shell=True)
            if bytes == type(f_type):
                f_type = f_type.decode()
            if "text" in f_type.split(": ")[-1]:
                files.append(p)
        else:
            file_scaner(glob(p + "/*"), files)

if len(argv) != 3:
    stderr.write("argument error: [" + ", ".join(argv[1:]) + "]")
    # print("argument error: [" + ", ".join(argv[1:]) + "]" , file=stderr)
    exit(1)

files = []
file_scaner(["."], files)

for file in files:
    with open(file, "r") as f:
        data = f.read()
    if argv[1] in data:
        data = data.replace(argv[1], argv[2])
        with open(file, "w") as f:
            f.write(data)
EOF
}



### ----------------- ###
### prompt functiuons ###
### ----------------- ###

export BASICINFO="$(whoami)@$(hostname | sed -e 's/\.local//g')"

function shell_info(){
    if ( ! $(git rev-parse --is-inside-work-tree > /dev/null 2>&1) ); then
        echo -e "${BASICINFO}  ( $(_pathWriter) )"
    else
        echo -e "${BASICINFO}  ( $(_gitRepoPathWriter) ) < $(_gitBranchPrinter) | $(_gitHashPrinter) >"
    fi
}


function _pathWriter(){
    if [ "$( pwd | grep ${HOME} )" ]; then
        pwd | sed "s\`${HOME}\`~\`g"
    else
        pwd
    fi
}


function _gitRepoPathWriter(){
    # Precondition: in git tree
    if [ -z "$(git status --porcelain 2> /dev/null)" ]; then
        # branch is clean
        if [ -f ~/.gitignore_global ]; then
            # ~/.gitignore_global is enabled
            echo -n "git: "
        else
            # ~/.gitignore_global is disabled
            echo -ne "${OSDEP_ESC_CODE}[0;39;7mgit:${OSDEP_ESC_CODE}[0;39m "
        fi
    else
        # branch is not clean
        if [ -f ~/.gitignore_global ]; then
            # ~/.gitignore_global is enabled
            echo -ne "${OSDEP_ESC_CODE}[1;31mgit:${OSDEP_ESC_CODE}[0;39m "
        else
            # ~/.gitignore_global is disabled
            echo -ne "${OSDEP_ESC_CODE}[1;31;7mgit:${OSDEP_ESC_CODE}[0;39m "
        fi
    fi
    git_path_info=($(git rev-parse --show-toplevel --show-prefix 2> /dev/null))
    echo ${git_path_info[1]} | xargs basename | xargs echo -n
    echo -n "/"${git_path_info[1]}
}


function _gitBranchPrinter(){
    # Precondition: in git tree
    gitBranch=$(git symbolic-ref --short HEAD 2> /dev/null)
    if [ $? = 0 ]; then
        # defaultBranch=$(git symbolic-ref --short refs/remotes/origin/HEAD 2> /dev/null | xargs basename)
        defaultBranch=$(git symbolic-ref --short refs/remotes/origin/HEAD 2> /dev/null | awk -F '/' '{print $NF}')
        if [ $? = 0 ]; then
            defaultBranch="master"
        fi
        if [ ${gitBranch} = ${defaultBranch} ]; then
            echo -n "${OSDEP_ESC_CODE}[0;33m${defaultBranch}${OSDEP_ESC_CODE}[0;39m"
        else
            echo -n "${gitBranch}"
        fi
    else
        echo -n "${OSDEP_ESC_CODE}[0;36mdetached${OSDEP_ESC_CODE}[0;39m"
    fi
}


function _gitHashPrinter(){
    # Precondition: in git tree
    gitHash=$(git rev-parse --short HEAD 2> /dev/null)
    if [ $? = 0 ]; then
        echo -n "${gitHash}"
    else
        echo -n "Not committed"
    fi
}


function _envWriter(){
    if [ ! -z "$VIRTUAL_ENV" ]; then
        echo -n "[ venv: "`echo -n $VIRTUAL_ENV | xargs basename`" ] "
    fi
}


function _screenStatusPrinter(){
    which screen > /dev/null 2>&1
    if [ $? = "0" ]; then
        # found screen command
        echo -ne "screen ${OSDEP_ESC_CODE}[0;35mattached${OSDEP_ESC_CODE}[0;39m:"
        screen -ls | grep Attached | tr '.' ' ' | awk -F ' ' '{printf " %5s", $1}'
        echo ""
        echo -ne "sereen ${OSDEP_ESC_CODE}[0;36mdetached${OSDEP_ESC_CODE}[0;39m:"
        screen -ls | grep Detached | tr '.' ' ' | awk -F ' ' '{printf " %5s", $1}'
        echo -e "\n"
    fi
}

function _sshScreenStarter(){
    which screen > /dev/null 2>&1
    # シェルの深さが1でSSHされている場合に起動
    if [ $SHLVL = 1 ] && [ "$TERM" != 'dumb' ] && [ "${SSH_CONNECTION}" != "" ] && [ $? = "0" ] && [ -f ~/.screenrc ]; then
        $(which screen)
    fi
}


function _bashIconWriter(){
    if [ "${SHELL_NAME}" = "bash" ]; then
        echo -n 'bash '
    elif [ "${SHELL_NAME}" = "zsh" ]; then
        echo -n 'zsh '
    else
        echo "SHELL_NAME is '${SHELL_NAME}'"
    fi
}


function _dir_status(){
    if [ `ls | wc -w` = 0 ]; then
        echo -e "Current directory is clean."
    elif [ "$(uname 2>&1)" = "Darwin" ]; then
        ls -G
    else
        # Linux
        ls --color=auto
    fi
}

function _blankLinePrinter(){
    echo ''
}


###
### 初回のみ表示する内容
###
_blankLinePrinter
_sshScreenStarter
_screenStatusPrinter
_dir_status
